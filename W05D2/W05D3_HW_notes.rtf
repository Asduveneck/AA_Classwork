{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red89\green138\blue67;}
\margl1440\margr1440\vieww11900\viewh10100\viewkind0
\deftab720
\pard\pardeftab720\sl360

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ## Indexing a Query\
\
SQL is a declarative language; we only tell the system _what_ we want to compute, not _how_ to compute it (delegated to the query planner subsystem within SQL database engine). \
   There are LOTS of different ways to perform the operation we specify; it\'92s up to the QUERY to choose the fastest and most efficient algorithm for each SQL statement. \
\
  What happens when the query planner doesn\'92t do a good job? We need to provide additional hints (indices\'85? more keys? ) \
\
SEARCHING\
\
  tables without Indices\
  If you try to look up a specific string, you may have to go through the entire table of N rows to find that string.\
\
  If you look up the rowID instead (assuming you know what it is in advance), you can use binary search (log(N)) to find what you\'92r looking for. This will be n/logn times faster.\
\
  However, HOW DO YOU KNOW WHAT THE rowID is?!? That\'92s stupid. You don\'92t care what the price of item blablabla is when you want to know the price of a specific thing or string.\
\
  We can create an index to do so. The index will put the item strings we\'92re looking for alongside the corresponding rowid in a new table. \
\
  We then look up the string in our index table and return the corresponding id (rowID). This search can be binary because the rows in Idx1 are sorted by `strings`. We can then conduct a binary search on the previous output (rowID) to find that id in the original table. Even though we\'92re doing two binary searches now, it\'92s still faster than an overall full-table query search.\
\
Multiple Result Rows:\
\
  This works even when we have multiple rows. We have an output of two rowdies\'92 from the first search. However, we just continue indexing once we found the first match in our second main table (not the index table we made) simply because they\'92re usually close by. (If I understood the reading correctly).\
\
Multiple AND-Connected WHERE-Clause Terms\
\
  Say we wanted to look up things conditionally, look up A based upon B and C somehow (with a WHERE or something)\'85 Previously, we just indexed B, but this time we can index B and C\'85  Then SQL will run the queries to do the filtering based upon minimizing the number of rows to return (if ANALYZE has been run). Otherwise, SQL can choose to either use a two-index approach, or stick with the original 1-index approach, then check the second condition as we see fit.\
\
Multi-Column Indices\
}